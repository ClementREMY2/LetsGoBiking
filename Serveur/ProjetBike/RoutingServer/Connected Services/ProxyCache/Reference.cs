//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RoutingServer.ProxyCache {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxyCache.IProxyCacheServeurService")]
    public interface IProxyCacheServeurService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxyCacheServeurService/getStations", ReplyAction="http://tempuri.org/IProxyCacheServeurService/getStationsResponse")]
        ProxyCacheServeur.JCDecaux_Json_Model.BikeStation[] getStations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxyCacheServeurService/getStations", ReplyAction="http://tempuri.org/IProxyCacheServeurService/getStationsResponse")]
        System.Threading.Tasks.Task<ProxyCacheServeur.JCDecaux_Json_Model.BikeStation[]> getStationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxyCacheServeurService/getClosestStation", ReplyAction="http://tempuri.org/IProxyCacheServeurService/getClosestStationResponse")]
        ProxyCacheServeur.JCDecaux_Json_Model.BikeStation getClosestStation(System.Device.Location.GeoCoordinate geoCoordinate, string contractName, bool checkAvailabity, bool checkCapacity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxyCacheServeurService/getClosestStation", ReplyAction="http://tempuri.org/IProxyCacheServeurService/getClosestStationResponse")]
        System.Threading.Tasks.Task<ProxyCacheServeur.JCDecaux_Json_Model.BikeStation> getClosestStationAsync(System.Device.Location.GeoCoordinate geoCoordinate, string contractName, bool checkAvailabity, bool checkCapacity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxyCacheServeurService/getStationsFromAContract", ReplyAction="http://tempuri.org/IProxyCacheServeurService/getStationsFromAContractResponse")]
        ProxyCacheServeur.JCDecaux_Json_Model.BikeStation[] getStationsFromAContract(string contractName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxyCacheServeurService/getStationsFromAContract", ReplyAction="http://tempuri.org/IProxyCacheServeurService/getStationsFromAContractResponse")]
        System.Threading.Tasks.Task<ProxyCacheServeur.JCDecaux_Json_Model.BikeStation[]> getStationsFromAContractAsync(string contractName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProxyCacheServeurServiceChannel : RoutingServer.ProxyCache.IProxyCacheServeurService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProxyCacheServeurServiceClient : System.ServiceModel.ClientBase<RoutingServer.ProxyCache.IProxyCacheServeurService>, RoutingServer.ProxyCache.IProxyCacheServeurService {
        
        public ProxyCacheServeurServiceClient() {
        }
        
        public ProxyCacheServeurServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProxyCacheServeurServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProxyCacheServeurServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProxyCacheServeurServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ProxyCacheServeur.JCDecaux_Json_Model.BikeStation[] getStations() {
            return base.Channel.getStations();
        }
        
        public System.Threading.Tasks.Task<ProxyCacheServeur.JCDecaux_Json_Model.BikeStation[]> getStationsAsync() {
            return base.Channel.getStationsAsync();
        }
        
        public ProxyCacheServeur.JCDecaux_Json_Model.BikeStation getClosestStation(System.Device.Location.GeoCoordinate geoCoordinate, string contractName, bool checkAvailabity, bool checkCapacity) {
            return base.Channel.getClosestStation(geoCoordinate, contractName, checkAvailabity, checkCapacity);
        }
        
        public System.Threading.Tasks.Task<ProxyCacheServeur.JCDecaux_Json_Model.BikeStation> getClosestStationAsync(System.Device.Location.GeoCoordinate geoCoordinate, string contractName, bool checkAvailabity, bool checkCapacity) {
            return base.Channel.getClosestStationAsync(geoCoordinate, contractName, checkAvailabity, checkCapacity);
        }
        
        public ProxyCacheServeur.JCDecaux_Json_Model.BikeStation[] getStationsFromAContract(string contractName) {
            return base.Channel.getStationsFromAContract(contractName);
        }
        
        public System.Threading.Tasks.Task<ProxyCacheServeur.JCDecaux_Json_Model.BikeStation[]> getStationsFromAContractAsync(string contractName) {
            return base.Channel.getStationsFromAContractAsync(contractName);
        }
    }
}
